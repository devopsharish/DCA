#Security
● Describe the process of signing an image
	- To sign a Docker Image you will need a delegation key pair. These keys can be generated locally using "$docker trust key generate", generated by a certificate authority, or if you are using Docker Enterprise’s Universal Control Plane (UCP).
	- Once the keys have been imported an image can be pushed with the $ docker push command, by exporting the DCT environmental variable.
● Demonstrate that an image passes a security scan
	https://docs.docker.com/datacenter/dtr/2.5/guides/admin/configure/set-up-vulnerability-scans/
● Enable Docker Content Trust
	By default, when you push an image to DTR, the Docker CLI client doesn’t sign the image.
	You can configure the Docker CLI client to sign the images you push to DTR. This allows whoever pulls your image to validate if they are getting the image you created, or a forged one.
	To sign an image, you can run:
		export DOCKER_CONTENT_TRUST=1
	Mutual Transport Layer Security, or MTLS, is used to secure communications between the manager and nodes in a Docker Swarm cluster.
● Configure RBAC in UCP
	https://blog.docker.com/2016/03/role-based-access-control-docker-ucp-tutorial/
	Levels of Permissions
		Full Control: Can do anything possible to resources. Create, restart, kill, view containers, etc. This is the highest level of access a non-admin user can have.
		Restricted Control: Similar to Full Control, but with restrictions around container exec, privileged containers, host-mounted volumes, and other particularly sensitive operations. This is best suited for when you want a group to run containers in production but not access kernel capabilities or modify a container using exec privileges.
		View Only: Look, but don’t touch. Can view and inspect resources, but nothing else.
		No Access: Cannot view or otherwise access resources.
		Every user has a default permissions setting which is assigned at account creation, and can be edited by an admin at any time. The default permissions are enforced for all non-container resources such as images, networks, and volumes.
● Integrate UCP with LDAP/AD	
	https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/
● Demonstrate creation of UCP client bundles
	UCP Console ->  My Profile -> In the left pane, click "Client Bundles" ->  "New Client Bundle" to download the certificate bundle.
	https://blog.docker.com/2017/09/get-familiar-docker-enterprise-edition-client-bundles/
● Describe default engine security
	You can configure Docker’s trust features so that your users can push and pull trusted images.
	You can protect the Docker daemon socket and ensure only trusted Docker client connections. 
	You can use certificate-based client-server authentication to verify a Docker daemon has the rights to access images on a registry.
	Namespaces provide the first and most straightforward form of isolation: processes running within a container cannot see, and even less affect, processes running in another container, or in the host system
	Control groups: Control Groups are another key component of Linux Containers. They implement resource accounting and limiting. They provide many useful metrics, but they also help ensure that each container gets its fair share of memory, CPU, disk I/O; and, more importantly, that a single container cannot bring the system down by exhausting one of those resources.
● Describe swarm default security
	The swarm mode public key infrastructure (PKI) system built into Docker makes it simple to securely deploy a container orchestration system. 
	The nodes in a swarm use mutual Transport Layer Security (TLS) to authenticate, authorize, and encrypt the communications with other nodes in the swarm.
	https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/
● Describe MTLS(Mutually Authenticated TLS )
	- Mutually Authenticated TLS is the implementation that was chosen to secure that communication. Any time a swarm is initialized, a self-signed Certificate Authority (CA) is generated and issues certificates to every node (manager or worker) to facilitate those secure communications.
	- Using TLS (Transport Layer Security) provides both privacy and data integrity in communications within the swarm.
	https://diogomonica.com/2017/01/11/hitless-tls-certificate-rotation-in-go/
● Identity roles
	UCP administrators view and manage roles by navigating to the Roles page.
	The system provides the following default roles:
	- None	The user has no access to swarm resources. This maps to the No Access role in UCP 2.1.x.
	- View Only	The user can view resources like services, volumes, and networks but can’t create them.
	- Restricted Control	The user can view and edit volumes, networks, and images but can’t run a service or container in a way that might affect the node where it’s running. The user can’t mount a node directory and can’t exec into containers. Also, The user can’t run containers in privileged mode or with additional kernel capabilities.
	- Scheduler	The user can view nodes and schedule workloads on them. Worker nodes and manager nodes are affected by Scheduler grants. Having Scheduler access doesn’t allow the user to view workloads on these nodes. They need the appropriate resource permissions, like Container View. By default, all users get a grant with the Scheduler role against the /Shared collection.
	- Full Control	The user can view and edit volumes, networks, and images. They can create containers without any restriction, but can’t see other users’ containers.
	https://docs.docker.com/datacenter/ucp/2.2/guides/access-control/permission-levels/#roles
● Describe the difference between UCP workers and managers
	UCP components in manager nodes
	 - ucp-agent: Monitors the node and ensures the right UCP services are running
	 - ucp-reconcile:	When ucp-agent detects that the node is not running the right UCP components, it starts the ucp-reconcile container to converge the node to its desired state. It is expected for the ucp-reconcile container to remain in an exited state when the node is healthy.
	 - ucp-auth-api: The centralized service for identity and authentication used by UCP and DTR
	 - ucp-auth-store:	Stores authentication configurations and data for users, organizations, and teams
	 - ucp-auth-worker:	Performs scheduled LDAP synchronizations and cleans authentication and authorization data
	 - ucp-client-root-ca:	A certificate authority to sign client bundles
	 - ucp-cluster-root-ca:	A certificate authority used for TLS communication between UCP components
	 - ucp-controller: The UCP web server
	 - ucp-dsinfo: Docker system information collection script to assist with troubleshooting
	 - ucp-kv: Used to store the UCP configurations. Don’t use it in your applications, since it’s for internal use only
	 - ucp-metrics: Used to collect and process metrics for a node, like the disk space available
	 - ucp-proxy: A TLS proxy. It allows secure access to the local Docker Engine to UCP components
	 - ucp-swarm-manager: Used to provide backwards-compatibility with Docker Swarm 
	UCP components in worker nodes
	 - ucp-agent: Monitors the node and ensures the right UCP services are running
	 - ucp-dsinfo: Docker system information collection script to assist with troubleshooting
	 - ucp-reconcile: When ucp-agent detects that the node is not running the right UCP components, it starts the ucp-reconcile container to converge the node to its desired state. It is expected for the ucp-reconcile container to remain in an exited state when the node is healthy.
	 - ucp-proxy: A TLS proxy. It allows secure access to the local Docker Engine to UCP components
● Describe process to use external certificates with UCP and DTR
	https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/use-your-own-tls-certificates/
	https://docs.docker.com/datacenter/dtr/2.3/guides/admin/configure/use-your-own-tls-certificates/
#Security
● Describe the process of signing an image
	- To sign a Docker Image you will need a delegation key pair. These keys can be generated locally using "$docker trust key generate", generated by a certificate authority, or if you are using Docker Enterprise’s Universal Control Plane (UCP).
	- Once the keys have been imported an image can be pushed with the $ docker push command, by exporting the DCT environmental variable.
● Demonstrate that an image passes a security scan
	https://docs.docker.com/datacenter/dtr/2.5/guides/admin/configure/set-up-vulnerability-scans/
● Enable Docker Content Trust
	By default, when you push an image to DTR, the Docker CLI client doesn’t sign the image.
	You can configure the Docker CLI client to sign the images you push to DTR. This allows whoever pulls your image to validate if they are getting the image you created, or a forged one.
	To sign an image, you can run:
		export DOCKER_CONTENT_TRUST=1
	Mutual Transport Layer Security, or MTLS, is used to secure communications between the manager and nodes in a Docker Swarm cluster.
● Configure RBAC in UCP
	https://blog.docker.com/2016/03/role-based-access-control-docker-ucp-tutorial/
	Levels of Permissions
		Full Control: Can do anything possible to resources. Create, restart, kill, view containers, etc. This is the highest level of access a non-admin user can have.
		Restricted Control: Similar to Full Control, but with restrictions around container exec, privileged containers, host-mounted volumes, and other particularly sensitive operations. This is best suited for when you want a group to run containers in production but not access kernel capabilities or modify a container using exec privileges.
		View Only: Look, but don’t touch. Can view and inspect resources, but nothing else.
		No Access: Cannot view or otherwise access resources.
		Every user has a default permissions setting which is assigned at account creation, and can be edited by an admin at any time. The default permissions are enforced for all non-container resources such as images, networks, and volumes.
● Integrate UCP with LDAP/AD	
	https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/
● Demonstrate creation of UCP client bundles
	UCP Console ->  My Profile -> In the left pane, click "Client Bundles" ->  "New Client Bundle" to download the certificate bundle.
	https://blog.docker.com/2017/09/get-familiar-docker-enterprise-edition-client-bundles/
● Describe default engine security
	You can configure Docker’s trust features so that your users can push and pull trusted images.
	You can protect the Docker daemon socket and ensure only trusted Docker client connections. 
	You can use certificate-based client-server authentication to verify a Docker daemon has the rights to access images on a registry.
	Namespaces provide the first and most straightforward form of isolation: processes running within a container cannot see, and even less affect, processes running in another container, or in the host system
	Control groups: Control Groups are another key component of Linux Containers. They implement resource accounting and limiting. They provide many useful metrics, but they also help ensure that each container gets its fair share of memory, CPU, disk I/O; and, more importantly, that a single container cannot bring the system down by exhausting one of those resources.
● Describe swarm default security
	The swarm mode public key infrastructure (PKI) system built into Docker makes it simple to securely deploy a container orchestration system. 
	The nodes in a swarm use mutual Transport Layer Security (TLS) to authenticate, authorize, and encrypt the communications with other nodes in the swarm.
	https://docs.docker.com/engine/swarm/how-swarm-mode-works/pki/
● Describe MTLS
● Identity roles
● Describe the difference between UCP workers and managers
● Describe process to use external certificates with UCP and DTR